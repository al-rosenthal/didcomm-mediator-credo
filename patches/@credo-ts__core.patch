diff --git a/build/agent/MessageSender.js b/build/agent/MessageSender.js
index 29d910e48cd179b40984123b3dcc44051e08d2b1..922b11396063e5678fda01032a07d4b2fc4234c3 100644
--- a/build/agent/MessageSender.js
+++ b/build/agent/MessageSender.js
@@ -76,7 +76,7 @@ let MessageSender = class MessageSender {
         this.logger.debug('Sending message');
         await session.send(agentContext, encryptedMessage);
     }
-    async sendPackage(agentContext, { connection, encryptedMessage, recipientKey, options, }) {
+    async sendPackage(agentContext, { connection, encryptedMessage, recipientKey, options, messageType, }) {
         var _a, e_1, _b, _c;
         var _d;
         const errors = [];
@@ -141,6 +141,7 @@ let MessageSender = class MessageSender {
                 connectionId: connection.id,
                 recipientDids: [(0, helpers_1.verkeyToDidKey)(recipientKey)],
                 payload: encryptedMessage,
+                messageType,
             });
             return;
         }
diff --git a/build/modules/message-pickup/storage/MessagePickupRepositoryOptions.d.ts b/build/modules/message-pickup/storage/MessagePickupRepositoryOptions.d.ts
index decb61a2a9e9c027a4d8841ebda943e3bd538a63..d82a10b6b16bfe5a7625e741c5ec4f3e99462e9e 100644
--- a/build/modules/message-pickup/storage/MessagePickupRepositoryOptions.d.ts
+++ b/build/modules/message-pickup/storage/MessagePickupRepositoryOptions.d.ts
@@ -13,6 +13,7 @@ export interface AddMessageOptions {
     connectionId: string;
     recipientDids: string[];
     payload: EncryptedMessage;
+    messageType?: string
 }
 export interface RemoveMessagesOptions {
     connectionId: string;
diff --git a/build/modules/routing/RoutingEvents.d.ts b/build/modules/routing/RoutingEvents.d.ts
index 578a26fca35f07bea4ed211b20c077e24e90d36c..0268c9cb1bc58d046dc46ae7a83b911a21dc39a0 100644
--- a/build/modules/routing/RoutingEvents.d.ts
+++ b/build/modules/routing/RoutingEvents.d.ts
@@ -2,11 +2,13 @@ import type { KeylistUpdate } from './messages/KeylistUpdateMessage';
 import type { MediationState } from './models/MediationState';
 import type { MediationRecord } from './repository/MediationRecord';
 import type { BaseEvent } from '../../agent/Events';
-import type { Routing } from '../connections';
+import type { Routing, ConnectionRecord } from '../connections';
+
 export declare enum RoutingEventTypes {
     MediationStateChanged = "MediationStateChanged",
     RecipientKeylistUpdated = "RecipientKeylistUpdated",
-    RoutingCreatedEvent = "RoutingCreatedEvent"
+    RoutingCreatedEvent = "RoutingCreatedEvent",
+    ForwardMessageEvent = "ForwardMessageEvent",
 }
 export interface RoutingCreatedEvent extends BaseEvent {
     type: typeof RoutingEventTypes.RoutingCreatedEvent;
@@ -28,3 +30,10 @@ export interface KeylistUpdatedEvent extends BaseEvent {
         keylist: KeylistUpdate[];
     };
 }
+export interface ForwardMessageEvent extends BaseEvent {
+    type: typeof RoutingEventTypes.ForwardMessageEvent;
+    payload: {
+        connectionRecord: ConnectionRecord;
+        messageType: string;
+    }
+}
diff --git a/build/modules/routing/RoutingEvents.js b/build/modules/routing/RoutingEvents.js
index 3db31e77c567e7a2f278f9306cb9cc2fe5897b7b..e0978d622dc7fc59ab2890a6124825ef375c1b90 100644
--- a/build/modules/routing/RoutingEvents.js
+++ b/build/modules/routing/RoutingEvents.js
@@ -6,5 +6,6 @@ var RoutingEventTypes;
     RoutingEventTypes["MediationStateChanged"] = "MediationStateChanged";
     RoutingEventTypes["RecipientKeylistUpdated"] = "RecipientKeylistUpdated";
     RoutingEventTypes["RoutingCreatedEvent"] = "RoutingCreatedEvent";
+    RoutingEventTypes["ForwardMessageEvent"] = "ForwardMessageEvent";
 })(RoutingEventTypes || (exports.RoutingEventTypes = RoutingEventTypes = {}));
 //# sourceMappingURL=RoutingEvents.js.map
\ No newline at end of file
diff --git a/build/modules/routing/handlers/ForwardHandler.js b/build/modules/routing/handlers/ForwardHandler.js
index 19a13cf8add94bbe40b541b1f31192f692ef429a..926f2bcc19d39f006714b516d61ed672a1875e92 100644
--- a/build/modules/routing/handlers/ForwardHandler.js
+++ b/build/modules/routing/handlers/ForwardHandler.js
@@ -9,6 +9,7 @@ class ForwardHandler {
     }
     async handle(messageContext) {
         await this.mediatorService.processForwardMessage(messageContext);
+        await this.mediatorService.emitForwardEvent(messageContext);
     }
 }
 exports.ForwardHandler = ForwardHandler;
diff --git a/build/modules/routing/services/MediatorService.d.ts b/build/modules/routing/services/MediatorService.d.ts
index 3f4782b5044892c739f35e9e31f8a3e4ecef1bfd..2c5af92421d19f0c0e29ddd604626eae6e693ccd 100644
--- a/build/modules/routing/services/MediatorService.d.ts
+++ b/build/modules/routing/services/MediatorService.d.ts
@@ -20,6 +20,7 @@ export declare class MediatorService {
     private connectionService;
     constructor(mediationRepository: MediationRepository, mediatorRoutingRepository: MediatorRoutingRepository, messagePickupApi: MessagePickupApi, eventEmitter: EventEmitter, logger: Logger, connectionService: ConnectionService);
     private getRoutingKeys;
+    emitForwardEvent(messageContext: InboundMessageContext<ForwardMessage>): Promise<void>;
     processForwardMessage(messageContext: InboundMessageContext<ForwardMessage>): Promise<void>;
     processKeylistUpdateRequest(messageContext: InboundMessageContext<KeylistUpdateMessage>): Promise<KeylistUpdateResponseMessage>;
     createGrantMediationMessage(agentContext: AgentContext, mediationRecord: MediationRecord): Promise<{
diff --git a/build/modules/routing/services/MediatorService.js b/build/modules/routing/services/MediatorService.js
index 17a87cddb6e5f9da0906de37b700363df3bdaa86..6fa4de8537b2d21a4050275ec670eaf01a17b318 100644
--- a/build/modules/routing/services/MediatorService.js
+++ b/build/modules/routing/services/MediatorService.js
@@ -43,6 +43,19 @@ let MediatorService = class MediatorService {
         this.logger = logger;
         this.connectionService = connectionService;
     }
+    async emitForwardEvent(messageContext) {
+        const { message, agentContext } = messageContext;
+        const mediationRecord = await this.mediationRepository.getSingleByRecipientKey(agentContext, message.to);
+        const connectionRecord = await this.connectionService.getById(agentContext, mediationRecord.connectionId);
+
+        this.eventEmitter.emit(agentContext, {
+            type: RoutingEvents_1.RoutingEventTypes.ForwardMessageEvent,
+            payload: {
+                connectionRecord,
+                messageType: message?.messageType || ''
+            },
+        });
+    }
     async getRoutingKeys(agentContext) {
         const mediatorRoutingRecord = await this.findMediatorRoutingRecord(agentContext);
         if (mediatorRoutingRecord) {
@@ -99,6 +112,7 @@ let MediatorService = class MediatorService {
                     connection,
                     recipientKey: (0, helpers_1.verkeyToDidKey)(message.to),
                     encryptedMessage: message.message,
+                    messageType: message.messageType,
                 });
         }
     }
